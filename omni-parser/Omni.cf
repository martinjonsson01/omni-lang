
entrypoints Module ; 

-- Identifiers --------------------------------------------

Name. Name ::= Ident ;

-- Modules ------------------------------------------------

Module. Module ::= "module" Name "(" ")" [TopDef] ;

-- Top-level definitions ----------------------------------

FnDef. TopDef ::= Name ParamList ":" Type "=" Exp ;

separator TopDef "" ;

ParamList. ParamList ::= "(" [Param] ")" ;

Param. Param ::= Name ":" Type ;

separator Param "," ;

-- Types --------------------------------------------------

TFn.    Type ::= "(" [Type] ")" "->" Type ;
TUnit.  Type ::= "(" ")" ;
TInt.   Type ::= "Int" ;
TNamed. Type ::= Name ; 

separator Type "," ;

-- Expressions --------------------------------------------

token InfixOpIdent ["+-*/<>=?^"]+ ;

EIdent.       Exp1 ::= Name ;
EIntLit.      Exp1 ::= Integer ;
EUnit.        Exp1 ::= "(" ")" ;
EInfixOp.     Exp  ::= Exp InfixOpIdent Exp1 ;
EApplication. Exp  ::= Exp "(" [Exp] ")" ;

coercions Exp 1 ; 
separator Exp "," ;