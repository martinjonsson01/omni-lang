
entrypoints Module ; 

-- Identifiers --------------------------------------------

token UpperIdent (upper (letter | digit | '_' | '\'')*) ;

token LowerIdent (lower (letter | digit | '_' | '\'')*) ;

TypeName. TypeName ::= UpperIdent ;

ConstructorName. ConstructorName ::= UpperIdent ;

UpperName. Name ::= UpperIdent ;
LowerName. Name ::= LowerIdent ;

TypeVarName. TypeVarName ::= LowerIdent ;

EffectVarName. EffectVarName ::= LowerIdent ;

-- Modules ------------------------------------------------

Module. Module ::= "module" UpperIdent "(" ")" [TopDef] ;

-- Top-level definitions ----------------------------------

TopFnDef.        TopDef ::= FnDef ;
TopDataDef.      TopDef ::= DataDef ;
TopInterfaceDef. TopDef ::= InterfaceDef ;

separator TopDef "" ;

--------- Functions ---------------------------------------

FnDef. FnDef ::= FnSig "=" Term ;

FnSig. FnSig ::= Name "(" [NamedPort] ")" ":" PegType ;

NamedPort. NamedPort ::= Name ":" PortType ;

separator NamedPort "," ;

--------- Data types --------------------------------------

DataDef. DataDef ::= "data" TypeName TypeVarList ConstructorList ;

NoConstructors.   ConstructorList ::= ;
SomeConstructors. ConstructorList ::= "=" [Constructor] ;

Constructor. Constructor ::= ConstructorName ValueTypeList ;

separator nonempty Constructor "|" ;

--------- Interfaces --------------------------------------

InterfaceDef. InterfaceDef ::= "interface" TypeName TypeVarList CommandSigList ;

NoCommandSigs.   CommandSigList ::= ;
SomeCommandSigs. CommandSigList ::= "=" [CommandSig] ;

CommandSig. CommandSig ::= Name "(" [NamedParam] ")" ":" ValueType ;

NamedParam. NamedParam ::= Name ":" ValueType ;

separator NamedParam "," ;

separator nonempty CommandSig "|" ;

-- Types --------------------------------------------------

TValueData.         ValueType ::= TypeName TypeArgList ;
TValueComputation.  ValueType ::= "{" ComputationType "}";
TValueParam.        ValueType ::= TypeVarName ;
TUnit.              ValueType ::= "Unit" ;
TInt.               ValueType ::= "Int" ;
separator           ValueType "," ;

NoValueTypes.       ValueTypeList ::= ;
SomeValueTypes.     ValueTypeList ::= "(" [ValueType] ")";

TComputation.       ComputationType ::= "(" [PortType] ")" ":" PegType;

TPortNone.          PortType ::= ValueType ;
TPortSome.          PortType ::= "<" AdjustmentType ">" ValueType ;
separator           PortType "," ;

TPegNone.           PegType ::= ValueType ;
TPegSome.           PegType ::= "[" AbilityType "]" ValueType ;

TVar.               TypeVariable ::= TypeVarName ;
TVarEffect.         TypeVariable ::= "[" EffectVarName "]" ;
separator nonempty  TypeVariable "," ;

NoTypeVars.         TypeVarList ::=  ;
SomeTypeVars.       TypeVarList ::= "(" [TypeVariable] ")" ;

TArgValue.          TypeArgument ::= ValueType ;
TArgAbility.        TypeArgument ::= "[" AbilityType "]" ;
separator nonempty  TypeArgument "," ;

NoTypeArgs.         TypeArgList ::=  ;
SomeTypeArgs.       TypeArgList ::= "(" [TypeArgument] ")" ;

TInterface.         InterfaceType ::= TypeName TypeArgList ;
separator           InterfaceType "," ;

TAbilityInterfaces. AbilityType ::= [InterfaceType] ;
TAbilityEffectVar.  AbilityType ::= EffectVarName ;

TAdjustment.        AdjustmentType ::= [InterfaceType] ;

-- Terms --------------------------------------------------

token InfixOpIdent ["+-*/<>=?^"]+ ;

EIdent.           Term2 ::= Name ;
EIntLit.          Term2 ::= Integer ;
EUnit.            Term2 ::= "(" ")" ;
EApplication.     Term1 ::= Term2 "(" [Term] ")" ;
EInfixOp.         Term1 ::= Term1 InfixOpIdent Term2 ;
EConSuspendedCom. Term1 ::= "{" [ComputationTerm] "}" ;
EConLet.          Term  ::= "let" [Binding] "in" Term ;
coercions         Term  2 ;
separator         Term  "," ;

BindAnnotated.    Binding ::= Name ":" ValueType "=" Term ;
separator         Binding "," ;

EComputation.     ComputationTerm ::= [ComputationPattern] "->" Term ;
separator         ComputationTerm "|" ;

CompPatValue.     ComputationPattern ::= ValuePattern ;
CompPatRequest.   ComputationPattern ::= "<" Name ValuePatternList "->" Name ">" ;
CompPatCatchAll.  ComputationPattern ::= "<" Name ">" ;
separator         ComputationPattern "|" ;

NoValuePatterns.   ValuePatternList ::= ;
SomeValuePatterns. ValuePatternList ::= "(" [ValuePattern] ")" ;

ValPat.            ValuePattern ::= Name ValuePatternList ;
separator nonempty ValuePattern "," ;




-- Comments -----------------------------------------------

comment "//" ;
comment "/*" "*/" ;