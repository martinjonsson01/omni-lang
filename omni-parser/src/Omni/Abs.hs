-- File generated by the BNF Converter (bnfc 2.9.6).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Omni.

module Omni.Abs where

import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  , fmap, fst, snd
  )
import qualified Data.String

import qualified Data.Text
import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

type Module = Module' BNFC'Position
data Module' a = Module a Ident [TopDef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type TopDef = TopDef' BNFC'Position
data TopDef' a = FnDef a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

newtype Ident = Ident Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

-- | Position range ((startLine, startColumn), (endLine, endColumn)) of something.

type BNFC'Position = C.Maybe ((C.Int, C.Int), (C.Int, C.Int))

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: (C.Int, C.Int) -> (C.Int, C.Int) -> BNFC'Position
pattern BNFC'Position start end = C.Just (start, end)

{-# COMPLETE BNFC'Position, BNFC'NoPosition #-}

startLineColBNFC'Position :: BNFC'Position -> C.Maybe (C.Int, C.Int)
startLineColBNFC'Position = C.fmap C.fst

endLineColBNFC'Position :: BNFC'Position -> C.Maybe (C.Int, C.Int)
endLineColBNFC'Position = C.fmap C.snd

spanBNFC'Position :: BNFC'Position -> BNFC'Position -> BNFC'Position
spanBNFC'Position ( BNFC'Position start _end ) ( BNFC'Position _start end ) = BNFC'Position start end
spanBNFC'Position ( BNFC'Position start end ) _ = BNFC'Position start end
spanBNFC'Position _ ( BNFC'Position start end ) = BNFC'Position start end
spanBNFC'Position BNFC'NoPosition BNFC'NoPosition = BNFC'NoPosition

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Module where
  hasPosition = \case
    Module p _ _ -> p

instance HasPosition TopDef where
  hasPosition = \case
    FnDef p -> p

